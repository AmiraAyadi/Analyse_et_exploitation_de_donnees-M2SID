# -*- coding: utf-8 -*-
"""
Created on Thu Oct 26 13:39:38 2017

@author: Amira AYADI
"""
import os
import numpy as np
from math import *
from scipy.misc import imread 
import matplotlib.pyplot as plt

img = imread('TP1.jpg')
plt.imshow(img, cmap='Greys_r')
transform = np.log(np.abs(np.fft.fft2(img))) # on prend le log que pour pouvoir voir l'image, en effet si on ne prend pas le log les valeurs seront trop grande et donc on ne verra rien
plt.imshow(transform, cmap='Greys_r' )

# Question 1 : ca donne la direction du texte

# Question 2 : creation d'une fonction descripteur

def descripteur(image):
    descripteur = []
    image = imread(image, mode ="L")
    # Trans de fourier 
    image = np.abs(np.fft.fft2(image))
    shape_x = np.shape(image)[0]
    shape_y = np.shape(image)[1]
    pasdex = 3
    pasdey = 3*2
    liste_x = np.arange(0,int(shape_x/2),int(shape_x/pasdex))
    liste_y = np.arange(0,int(shape_y/2),int(shape_y/pasdey))
    # Creation descripteur
    for x in liste_x :
        for y in liste_y:
            bloc_energ=np.log(np.mean(image[x:x+int(shape_x/pasdex),y:y+int(shape_y/pasdey)]**2))
            descripteur.append(bloc_energ)
    return descripteur

# Question 3 :
    

def indexation(path):
    tot_descri = {}
    rep = os.listdir(path)
    for s in rep :
        #plt.imshow(image, cmap = 'Greys_r')
        image = path + s
        tot_descri[s] = descripteur(image)
    return tot_descri

path = "./BE/"
indexation(path)

 
def distance_manhattan(x,y):
    return sum(abs(a-b) for a,b in zip(x,y))   

def image_plus_proche():
    liste=[]
    liste_nom=[]
    a_comparer = int(input(" Quelle est l'image que vous voulez comparer ? Veuillez entrer son numero \n"))
    path = "./BE/"
    if a_comparer in [1,2,3,4,5,6,7,8,9]:
        image_comp = path+"0"+str(a_comparer)+'.jpg'
    else:
        image_comp = path+str(a_comparer)+'.jpg'
    descripteur_image_comp = descripteur(image_comp)
    dico_descri = indexation(path)
    for index, key in dico_descri.items():
        liste.append(distance_manhattan(key,descripteur_image_comp))
        liste_nom.append(index)
    position=liste.index(0.0)
    del liste[position]
    del liste_nom[position]
    print("les images les plus proches sont : \n")
    for i in range(10):
        print(str(liste_nom[liste.index(min(liste))]))
        min_supp = liste.index(min(liste))
        del liste[min_supp]
        del liste_nom[min_supp]
            
image_plus_proche()
